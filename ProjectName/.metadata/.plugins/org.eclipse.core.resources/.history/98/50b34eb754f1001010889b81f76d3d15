import java.awt.Component;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.media.opengl.GL;
import javax.media.opengl.GL2;
import javax.media.opengl.GL2ES1;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.awt.GLCanvas;
import javax.media.opengl.fixedfunc.GLLightingFunc;
import javax.media.opengl.fixedfunc.GLMatrixFunc;
import javax.media.opengl.glu.GLU;
import javax.swing.JFrame;

import com.jogamp.opengl.util.Animator;

// Imported from local libraries

public class JOGLQuad extends JFrame implements GLEventListener, KeyListener {
	float rotateT = 0.0f;
	static GLU glu = new GLU();
	static GLCanvas canvas = new GLCanvas();
	static Frame frame = new Frame("Jogl Quad drawing");
	static Animator animator = new Animator(canvas);

	public JOGLTest() {
		
	}
	
	public void display(GLAutoDrawable gLDrawable) {
		final GL2 gl = gLDrawable.getGL().getGL2();
		gl.glClear(GL.GL_COLOR_BUFFER_BIT);
		gl.glClear(GL.GL_DEPTH_BUFFER_BIT);
		gl.glLoadIdentity();
		gl.glTranslatef(0.0f, 0.0f, -5.0f);

		// rotate on the three axis
		gl.glRotatef(rotateT, 1.0f, 0.0f, 0.0f); // x - roll
		gl.glRotatef(rotateT, 0.0f, 1.0f, 0.0f); // y - yaw
		gl.glRotatef(rotateT, 0.0f, 0.0f, 1.0f); // z - pitch
		
		// Awesome! [http://www.falloutsoftware.com/tutorials/gl/gl3.htm] -Ryan
	    
		/** Draw Triangles */
		gl.glBegin(GL2.GL_TRIANGLES); // Begin Larger Triangle
		gl.glVertex3f(-1.0f, -0.5f, -4.0f); // Lower left vertex
	    gl.glColor3f(1.0f, 0.0f, 0.0f); // Red
	    gl.glVertex3f( 1.0f, -0.5f, -4.0f); // Lower right vertex
	    gl.glColor3f(0.0f, 1.0f, 0.0f); // Green
	    gl.glVertex3f( 0.0f,  0.5f, -4.0f); // Upper vertex
	    gl.glColor3f(1.0f, 0.0f, 1.0f); // Magenta
	    gl.glEnd(); // Done Drawing Larger Triangle
	    
	    gl.glBegin(GL2.GL_TRIANGLES); // Begin Smaller Triangle
	    gl.glVertex3f(-0.5f, -1.5f, -4.0f); // Lower left vertex
	    gl.glColor3f(1.0f, 1.0f, 0.0f); // Yellow
	    gl.glVertex3f( 0.5f, -1.5f, -4.0f); // Lower right vertex
	    gl.glColor3f(0.0f, 1.0f, 1.0f); // Cyan
	    gl.glVertex3f( 0.0f, -1.0f, -4.0f); // Upper vertex
	    gl.glColor3f(0.0f, 0.0f, 1.0f); // Blue
	    gl.glEnd(); // Done Drawing Smaller Triangle
		
		
		/** Draw A Quad	*/	
		gl.glBegin(GL2.GL_QUADS);
		gl.glVertex3f(-0.5f, 0.5f, 0.0f); // Top Left
		gl.glColor3f(1.0f, 0.0f, 0.0f); // Red
		gl.glVertex3f(0.5f, 0.5f, 0.0f); // Top Right
		gl.glColor3f(1.0f, 1.0f, 0.0f); // Yellow
		gl.glVertex3f(0.5f, -0.5f, 0.0f); // Bottom Right
		gl.glColor3f(0.0f, 1.0f, 0.0f); // Green
		gl.glVertex3f(-0.5f, -0.5f, 0.0f); // Bottom Left
		gl.glColor3f(0.0f, 0.0f, 1.0f); // Blue
		gl.glEnd(); // Done Drawing The Quad
		
		// increasing rotation for the next iteration
		rotateT += 0.05f;
	}

	public void displayChanged(GLAutoDrawable gLDrawable, boolean modeChanged,
			boolean deviceChanged) {
	}

	public void init(GLAutoDrawable gLDrawable) {
		GL2 gl = gLDrawable.getGL().getGL2();
		gl.glShadeModel(GLLightingFunc.GL_SMOOTH);
		gl.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
		gl.glClearDepth(1.0f);
		gl.glEnable(GL.GL_DEPTH_TEST);
		gl.glDepthFunc(GL.GL_LEQUAL);
		gl.glHint(GL2ES1.GL_PERSPECTIVE_CORRECTION_HINT, GL.GL_NICEST);
		((Component) gLDrawable).addKeyListener(this);
	}

	public void reshape(GLAutoDrawable gLDrawable, int x, int y, int width,
			int height) {
		GL2 gl = gLDrawable.getGL().getGL2();
		if (height <= 0) {
			height = 1;
		}
		float h = (float) width / (float) height;
		gl.glMatrixMode(GLMatrixFunc.GL_PROJECTION);
		gl.glLoadIdentity();
		glu.gluPerspective(50.0f, h, 1.0, 1000.0);
		gl.glMatrixMode(GLMatrixFunc.GL_MODELVIEW);
		gl.glLoadIdentity();
	}

	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
			exit();
		}
	}

	public void keyReleased(KeyEvent e) {
	}

	public void keyTyped(KeyEvent e) {
	}

	public static void exit() {
		animator.stop();
		frame.dispose();
		System.exit(0);
	}

	public static void main(String[] args) {
		canvas.addGLEventListener(new JOGLQuad());
		frame.add(canvas);
		frame.setSize(640, 480);
		frame.setUndecorated(true);
		//frame.setExtendedState(Frame.MAXIMIZED_BOTH);
		frame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				exit();
			}
		});
		frame.setVisible(true);
		animator.start();
		canvas.requestFocus();
	}

	public void dispose(GLAutoDrawable gLDrawable) {
		// do nothing
	}
}